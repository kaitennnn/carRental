<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <title>Profile - CarRental</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="/stylesheets/style.css">
</head>

<body>
    <nav class="navbar">
        <a href="/" class="logo">carRental</a>
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/cars">CarList</a></li>
            <% if (currentUser) { %>
                <li class="user-menu">
                    <span class="user-name">Hello, <%= currentUserName %>!</span>
                    <form action="/users/logout" method="post" class="logout-form">
                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                        <button type="submit" class="logout-button">Logout</button>
                    </form>
                </li>
                <% } %>
        </ul>
    </nav>

    <main class="admin-container">
        <div class="admin-form">
            <div class="profile-header">
                <div class="user-avatar">
                    <i class="fas fa-user-circle" style="font-size: 4rem; color: var(--color-primary);"></i>
                </div>
                <div class="user-basic-info">
                    <h2>
                        <%= currentUserName || 'Your Full Name' %>
                    </h2>
                    <p class="user-email">
                        <%=user.email%>
                    </p>
                </div>
            </div>

            <div class="profile-tabs">
                <button class="tab-button active" data-tab="bookings">
                    <i class="fas fa-calendar-alt"></i> Booking History
                </button>
                <button class="tab-button" data-tab="personal-info">
                    <i class="fas fa-user"></i> Personal Information
                </button>
                <button class="tab-button" data-tab="settings">
                    <i class="fas fa-cog"></i> Account Settings
                </button>
            </div>

            <div class="tab-content active" id="bookings">
                <h3>Booking History</h3>
                <div id="booking-list" class="booking-list">
                    <div class="loading">Loading booking history...</div>
                </div>
            </div>


            <div class="tab-content" id="personal-info">
                <h3>Personal Information</h3>
                <form class="profile-form" id="profileForm">
                    <div class="form-group">
                        <label class="form-label" for="userName">Full Name</label>
                        <input type="text" id="userName" name="userName" class="form-control"
                            value="<%= currentUserName || '' %>" disabled>
                        <small class="form-help">Username cannot be modified</small>
                    </div>

                    <div class="form-group">
                        <label for="phoneProfile">Contact Number</label>
                        <div class="phone-verify">
                            <input type="tel" id="phoneProfile" name="phone" class="form-control"
                                value="<%= user.phone %>" maxlength="11" required
                                data-original-phone="<%= user.phone %>">
                            <button type="button" id="sendCodeBtn" class="verify-btn" disabled>Send Code</button>
                        </div>

                    </div>

                    <div class="form-group" id="codeGroup" style="display:none;">
                        <label for="codeProfile">Verification Code</label>
                        <input type="text" id="codeProfile" name="code" class="form-control" maxlength="6">
                        <button type="button" id="checkCodeBtn" class="verify-btn">Verify</button>
                        <small id="codeHelp" class="form-help"></small>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="email">Email Address</label>
                        <input type="email" id="email" name="email" class="form-control" value="<%=user.email%>">
                    </div>

                    <div class="admin-buttons">
                        <button type="submit" class="btn btn-primary">Update Information</button>
                        <button type="button" class="btn btn-outline" onclick="resetForm()">Reset</button>
                        <button type="button" class="delete-btn" onclick="deleteAccount()">Delete Account</button>
                    </div>
                </form>
            </div>

            <div class="tab-content" id="settings">
                <h3>Account Settings</h3>
                <form class="profile-form" id="passwordForm">
                    <div class="form-group">
                        <label class="form-label" for="currentPassword">Current Password</label>
                        <input type="password" id="currentPassword" name="currentPassword" class="form-control"
                            required>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="newPassword">New Password</label>
                        <input type="password" id="newPassword" name="newPassword" class="form-control" minlength="8"
                            required>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="confirmPassword">Confirm New Password</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" class="form-control"
                            minlength="8" required>
                    </div>

                    <div class="admin-buttons">
                        <button type="submit" class="btn btn-primary">Change Password</button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2025 CarRental. All rights reserved.</p>
    </footer>

    <script>
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        // 標籤切換功能
        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', function () {
                const tabId = this.dataset.tab;

                // 移除所有活動狀態
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

                // 添加當前活動狀態
                this.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });

        async function loadBookingHistory() {
            try {
                const res = await fetch('/users/getbooking', {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                });
                if (!res.ok) throw new Error('Failed to load bookings');
                const bookings = await res.json();

                const container = document.querySelector('.booking-list');
                if (!bookings.length) {
                    container.innerHTML = '<p>No booking records found</p>';
                    return;
                }

                container.innerHTML = bookings.map(b => `
      <div class="card">
        <div class="card__body">
          <div class="booking-item">
            <h4>${b.brand} ${b.model}</h4>
            <p><strong>Booking Date:</strong> ${b.startDate} to ${b.endDate}</p>
            <p><strong>Status:</strong> <span class="status ${statusClass(b.status ?? 'pending')}">${b.status ?? 'Pending'}</span></p>
            <p><strong>Total Amount:</strong> $${Number(b.amount).toLocaleString()}</p>
          </div>
        </div>
      </div>
    `).join('');
            } catch (err) {
                console.error(err);
                document.querySelector('.booking-list').innerHTML = '<p>Error loading booking records.</p>';
            }
        }

        function statusClass(status) {
            switch (status.toLowerCase()) {
                case 'completed': return 'status--success';
                case "booked": return 'status--info';
                case 'in progress': return 'status--info';
                case 'cancelled': return 'status--error';
                default: return '';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadBookingHistory();
        });

        document.addEventListener('DOMContentLoaded', () => {
            const profileForm = document.getElementById('profileForm');
            const phoneInput = document.getElementById('phoneProfile');
            const sendBtn = document.getElementById('sendCodeBtn');
            const checkBtn = document.getElementById('checkCodeBtn');
            const codeGroup = document.getElementById('codeGroup');
            const codeHelp = document.getElementById('codeHelp');
            const errorEl = document.getElementById('errorMsg');
            const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

            // 原始手机号
            const originalPhone = phoneInput.dataset.originalPhone;

            // 2. 初始化：如果未修改手机号，则标记已验证并禁用按钮
            if (phoneInput.value.trim() == originalPhone) {
                profileForm.dataset.phoneVerified = 'true';
                sendBtn.disabled = true;
            } else {
                profileForm.dataset.phoneVerified = 'false';
                sendBtn.disabled = false;
            }

            // 显示错误信息
            function showError(msg) {
                errorEl.textContent = msg;
                errorEl.style.display = 'block';
            }

            // 3. 监听输入变化
            phoneInput.addEventListener('input', () => {
                const changed = phoneInput.value.trim() != originalPhone;
                sendBtn.disabled = !changed;
                if (!changed) {
                    codeGroup.style.display = 'none';
                    profileForm.dataset.phoneVerified = 'true';
                } else {
                    profileForm.dataset.phoneVerified = 'false';
                }
            });


            // 发送验证码
            sendBtn.addEventListener('click', async () => {
                const phone = phoneInput.value.trim();
                if (!/^\d{8,11}$/.test(phone)) {
                    showError('Please enter a valid phone number');
                    return;
                }
                errorEl.style.display = 'none';
                try {
                    const res = await fetch('/users/send-verification', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'CSRF-Token': csrfToken
                        },
                        body: JSON.stringify({ phone })
                    });
                    if (!res.ok) throw new Error();
                    codeGroup.style.display = 'block';
                    codeHelp.textContent = 'Code sent';
                } catch {
                    codeHelp.textContent = 'Failed to send code';
                }
            });

            // 验证验证码
            checkBtn.addEventListener('click', async () => {
                const phone = phoneInput.value.trim();
                const code = document.getElementById('codeProfile').value.trim();
                if (!code) {
                    codeHelp.textContent = 'Enter the code';
                    return;
                }
                try {
                    const res = await fetch('/users/check-verification', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'CSRF-Token': csrfToken
                        },
                        body: JSON.stringify({ phone, code })
                    });
                    const result = await res.json();
                    if (result.success) {
                        codeHelp.textContent = 'Verified';
                        profileForm.dataset.phoneVerified = 'true';
                    } else {
                        codeHelp.textContent = result.error || 'Verification failed';
                    }
                } catch {
                    codeHelp.textContent = 'Verification request failed';
                }
            });

            // 表单提交前检查
            profileForm.addEventListener('submit', e => {
                errorEl.style.display = 'none';
                const changed = phoneInput.value.trim() !== originalPhone;
                if (changed && profileForm.dataset.phoneVerified !== 'true') {
                    e.preventDefault();
                    showError('Please verify your new phone number first');
                }
            });
        });
        // 個人資料表單提交
        document.getElementById('profileForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const data = Object.fromEntries(formData);

            try {
                const response = await fetch('/users/profile/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': csrfToken
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                if (result.success) {
                    alert('Information updated successfully!');
                } else {
                    alert(result.message || 'Update failed');
                }
            } catch (error) {
                alert('Network error, please try again later');
                console.error('Update error:', error);
            }
        });

        // 密碼變更表單提交
        document.getElementById('passwordForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (newPassword !== confirmPassword) {
                alert('New password and confirm password do not match');
                return;
            }

            const formData = new FormData(this);
            const data = Object.fromEntries(formData);

            try {
                const response = await fetch('/users/password/change', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': csrfToken
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                if (result.success) {
                    alert('Password changed successfully!');
                    this.reset();
                } else {
                    alert(result.message || 'Password change failed');
                }
            } catch (error) {
                alert('Network error, please try again later');
                console.error('Password change error:', error);
            }
        });

        // 重置表單
        function resetForm() {
            document.getElementById('profileForm').reset();
        }

        // 刪除帳戶
        async function deleteAccount() {
            if (!confirm('Are you sure you want to delete your account? This operation cannot be undone!')) {
                return;
            }

            if (!confirm('Final confirmation: Deleting your account will clear all data. Are you sure to continue?')) {
                return;
            }

            try {
                const response = await fetch('/users/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': csrfToken
                    }
                });

                const result = await response.json();
                if (result.success) {
                    alert('Account has been deleted');
                    window.location.href = '/';
                } else {
                    alert(result.message || 'Deletion failed');
                }
            } catch (error) {
                alert('Network error, please try again later');
                console.error('Delete account error:', error);
            }
        }
    </script>

    <style>

    </style>
</body>

</html>