<!DOCTYPE html>
<html lang="en-HK">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <link rel="stylesheet" href="./stylesheets/style.css">
    <style>
        /* 搜索框樣式 - 扁平長方形 */
        .search-box {
            display: block;
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: var(--radius-2xl);
            box-shadow: var(--shadow-xl);
        }

        .search-box form {
            display: grid;
            flex-direction: column;
            gap: var(--space-16);
        }

        .search-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 5px;
            color: #495057;
        }

        .form-group select,
        .form-group input {
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 14px;
            background-color: white;
        }
    </style>
</head>

<body>
    <nav class="navbar">
        <a href="/" class="logo">carRental</a>
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/cars">Car List</a></li>
            <% if (currentUser && currentRole==='admin' ) { %>
                <li><a href="/cars/statistics">Statistics</a></li>
                <% } %>
                    <% if (currentUser) { %>
                        <li><a href="/users/profile/<%= currentUserName %>">Profile</a></li>
                        <li class="user-menu">
                            <!-- 登录后直接显示用户名 -->
                            <span class="user-name">Hello, <%= currentUserName %>!</span>
                            <form action="/users/logout" method="post" class="logout-form">
                                <button type="submit" class="logout-button">Logout</button>
                            </form>
                        </li>
                        <% } else { %>
                            <li class="user-menu">
                                <a href="/users/login?returnUrl=/cars">
                                    <i class="fas fa-user">Login</i>
                                </a>
                            </li>
                            <% } %>
        </ul>
    </nav>

    <main class="cars-container">
        <div class="search-box">
            <form id="search" class="search-form">
                <div class="form-group">
                    <label for="brand">Brand:</label>
                    <select id="brand" name="brand">
                        <option value="">Loading...</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="model">Model:</label>
                    <select id="model" name="model">
                        <option value="" <%=locals.model=='' ?'selected':''%>>Please select a brand first</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="dailyRate">Daily Rate:</label>
                    <input type="number" id="dailyRate" name="dailyRate" placeholder="Minimum $600" min="600"
                        value="<%=locals.dailyRate?dailyRate:''%>">
                </div>

                <div class="form-group">
                    <label for="seats">Number of Seats:</label>
                    <input type="number" id="seats" name="seats" placeholder="e.g. 5" min="2"
                        value="<%=locals.seats?seats:''%>">
                </div>

                <div class="form-group">
                    <label for="dateRange">Rental Date:</label>
                    <input type="text" id="dateRange" placeholder="Select date range">
                </div>

                <!-- 隱藏欄位，用來存 startDate 和 endDate -->
                <input type="hidden" id="startDate" name="startDate" value="<%=locals.seats?seats:''%>">
                <input type="hidden" id="endDate" name="endDate" value="<%=locals.seats?seats:''%>">
                <div class="form-group">
                    <button type="submit" class="search-button">Search Cars</button>
                    <% if (currentRole=='admin' ) { %>
                        <button type="button" class="search-button" onclick="window.location.href = '/cars/edit/0';">➕
                            Add Car</button>
                        <% } %>
                </div>
            </form>
        </div>

    </main>

    <section>
        <div id="searchResult" class="cars-grid"></div>
    </section>

    <footer>
        <p>&copy; 2025 CarRental. All rights reserved.</p>
    </footer>

</body>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
    window.initialBrand = '<%= locals.brand || "" %>';
    window.initialModel = '<%= locals.model || "" %>';
    let currentSearchParams = new URLSearchParams();
    let skip = 0;
    let loading = false;
    let finished = false;
    const BATCH_SIZE = 9;
    const modelCache = new Map(); // 快取型號資料

    document.getElementById('search').addEventListener('submit', function (e) {
        e.preventDefault();
        search();
    });

    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    async function postJson(url, body) {
        const res = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': csrfToken    // csurf 默认会读取这个 header
            },
            body: JSON.stringify(body)
        });
        return res;
    }

    // 統一的渲染函數
    const renderCars = (cars, append = false) => {
        const container = document.getElementById("searchResult");
        if (!cars || cars.length === 0) {
            if (!append) {
                container.innerHTML = '<div class="no-results">No vehicles found matching your criteria</div>';
            }
            return;
        }

        let cardsHtml = '';
        cars.forEach(car => {
            cardsHtml += `
                <div class="car-card" onclick="location.href='/booking?carID=${car.carID}'">
                    <img src="${car.imageURL || '/images/default-car.jpg'}"
                         class="car-image"
                         onerror="this.src='/images/default-car.jpg'">
                    <div class="car-info">
                        <div class="car-title">${car.brand} ${car.model}</div>
                        <div class="car-year">${car.year} Year</div>
                        <div class="car-details">
                            <div class="car-detail"><strong>Type:</strong> ${car.type || ''}</div>
                            <div class="car-detail"><strong>Seats:</strong> ${car.seats || ''} passengers</div>
                            <div class="car-detail"><strong>Transmission:</strong> ${car.transmission || ''}</div>
                            <div class="car-detail"><strong>Power Source:</strong> ${car.powerSource || ''}</div>
                        </div>
                        <div class="car-price">$${(car.dailyRate || 0).toLocaleString()}/day</div>
                    </div>
                    <% if (currentRole == 'admin') { %>
                    <div class="admin-buttons">
                <button type="button" class="edit-btn" onclick="event.stopPropagation();editCar('${car.carID}')">Edit</button>
                <button type="button" class="delete-btn" onclick="event.stopPropagation();deleteCar('${car.carID}')">Delete</button>
                </div>
                <% } %>
                </div>
            `;
        });
        if (append) {
            container.innerHTML += cardsHtml;
        } else {
            container.innerHTML = cardsHtml;
        }
    };

    // 載入品牌列表
    const loadBrands = async () => {
        const brandSelect = document.getElementById('brand');
        try {
            const response = await fetch('cars/api/brands');
            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const brands = await response.json();
            console.log('Brands loaded:', brands);

            // 清空並填充品牌選項
            brandSelect.innerHTML = '<option value="">Select Brand</option>';
            brands.forEach(brand => {
                const option = document.createElement('option');
                option.value = brand;
                option.textContent = brand;
                brandSelect.appendChild(option);
            });

            // 如果有初始選中的 brand，設置並載入對應型號
            if (window.initialBrand) {
                brandSelect.value = window.initialBrand;
                await loadModels(window.initialBrand);
            }

        } catch (error) {
            console.error('載入品牌失敗:', error);
            brandSelect.innerHTML = '<option value="">Failed to load brands</option>';
        }
    };

    // 載入型號列表
    const loadModels = async (selectedBrand) => {
        const modelSelect = document.getElementById('model');

        if (!selectedBrand) {
            modelSelect.innerHTML = '<option value="">Please select a brand first</option>';
            return;
        }

        modelSelect.innerHTML = '<option value="">Loading...</option>';

        try {
            let models;

            // 檢查快取
            if (modelCache.has(selectedBrand)) {
                models = modelCache.get(selectedBrand);
            } else {
                // 從 API 獲取並快取
                const response = await fetch(`cars/api/models/${encodeURIComponent(selectedBrand)}`);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                models = await response.json();
                modelCache.set(selectedBrand, models);
            }

            console.log('Models loaded for', selectedBrand, ':', models);

            // 填充型號選項
            modelSelect.innerHTML = '<option value="">Select Model</option>';
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model;
                option.textContent = model;
                modelSelect.appendChild(option);
            });

            // 如果有初始選中的 model，設置之
            if (window.initialModel) {
                modelSelect.value = window.initialModel;
            }

        } catch (error) {
            console.error('載入型號失敗:', error);
            modelSelect.innerHTML = '<option value="">Failed to load models</option>';
        }
    };

    // 搜尋函數
    const search = async () => {
        const form = document.getElementById("search");
        // Step 1: 建立一個純物件形式的body
        const body = {};
        Array.from(form.elements).filter(input => input.type != 'button' && input.name).forEach(input => {
            body[input.name] = input.value;
        });

        body.skip = 0;
        body.limit = BATCH_SIZE;

        try {
            const response = await fetch("/cars/search", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "CSRF-Token": csrfToken
                },
                body: JSON.stringify(body)
            });
            if (!response.ok) throw new Error(`Response status: ${response.status}`);
            const cars = await response.json();
            renderCars(cars, false);
            skip = cars.length;
            finished = cars.length < BATCH_SIZE;
        } catch (error) {
            document.getElementById("searchResult").innerHTML =
                '<div class="no-results">Error occurred while searching, please try again later</div>';
        }
    };

    // 載入下一批
    const loadNextBatch = async () => {
        if (loading || finished) return;
        loading = true;

        const params = new URLSearchParams(currentSearchParams);
        params.append('skip', skip.toString());
        params.append('limit', BATCH_SIZE.toString());

        try {
            const res = await fetch('/cars/search', {
                method: 'POST',
                body: params
            });
            if (!res.ok) throw new Error(res.status);
            const cars = await res.json();

            if (cars.length < BATCH_SIZE) finished = true;
            renderCars(cars, true);
            skip += cars.length;
        } catch (err) {
            console.error('載入錯誤', err);
        } finally {
            loading = false;
        }
    };

    // 初始化日期選擇器
    const initDatePicker = () => {
        flatpickr("#dateRange", {
            mode: "range",
            minDate: "today",
            dateFormat: "Y-m-d",
            disableMobile: true,
            locale: {
                rangeSeparator: " to ",
                firstDayOfWeek: 1,
                weekdays: {
                    shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    longhand: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
                }
            },
            onChange: function (selectedDates, dateStr, instance) {
                if (selectedDates.length === 2) {
                    document.getElementById("startDate").value = selectedDates[0].toISOString().split('T')[0];
                    document.getElementById("endDate").value = selectedDates[1].toISOString().split('T')[0];
                }
            }
        });
    };

    // 頁面初始化
    document.addEventListener('DOMContentLoaded', async () => {
        modelCache.clear();
        // 1. 載入品牌選項
        await loadBrands();

        // 2. 綁定品牌變更事件
        document.getElementById('brand').addEventListener('change', function () {
            loadModels(this.value);
        });

        // 3. 初始化日期選擇器
        initDatePicker();

        // 4. 執行初始搜索
        search();
    });

    // 滾動載入更多
    window.addEventListener('scroll', () => {
        const { scrollTop, clientHeight, scrollHeight } = document.documentElement;
        if (scrollTop + clientHeight >= scrollHeight - 100) {
            loadNextBatch();
        }
    });

    function editCar(carID) {
        window.location.href = `/cars/edit/${carID}`;
    }

    async function deleteCar(carID) {
        if (!confirm('Are you sure you want to delete this car?')) return;

        try {
            const res = await postJson('/cars/delete', { carID });
            if (!res.ok) throw new Error('Delete failed');
            alert('Delete successful');
            search();
        } catch (err) {
            alert('Delete failed, please try again later');
            console.error('刪除錯誤:', err);
        }
    }

</script>

</html>